package i5.las2peer.services.faq;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.HashMap;

import javax.ws.rs.core.MediaType;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import i5.las2peer.p2p.LocalNode;
import i5.las2peer.p2p.ServiceNameVersion;
import i5.las2peer.security.ServiceAgent;
import i5.las2peer.security.UserAgent;
import i5.las2peer.testing.MockAgentFactory;
import i5.las2peer.webConnector.WebConnector;
import i5.las2peer.webConnector.client.ClientResponse;
import i5.las2peer.webConnector.client.MiniClient;

/**
 * 
 * FAQService - Test Class
 * 
 * This class provides a basic testing framework for the microservice FAQService. It was generated by the CAE (Community
 * Application Framework).
 *
 */
public class FAQTest {

	private static final String HTTP_ADDRESS = "http://127.0.0.1";
	private static final int HTTP_PORT = WebConnector.DEFAULT_HTTP_PORT;

	private static LocalNode node;
	private static WebConnector connector;
	private static ByteArrayOutputStream logStream;

	private static UserAgent testAgent;
	private static final String testPass = "adamspass";

	// version does not matter in tests
	private static final ServiceNameVersion testTemplateService = new ServiceNameVersion(FAQ.class.getCanonicalName(),
			"0.1");

	private static final String mainPath = "faq";

	/**
	 * 
	 * Called before the tests start.
	 * 
	 * Sets up the node and initializes connector and users that can be used throughout the tests.
	 * 
	 * @throws Exception
	 * 
	 */
	@BeforeClass
	public static void startServer() throws Exception {

		// start node
		node = LocalNode.newNode();
		UserAgent userAgent = MockAgentFactory.getAdam();
		userAgent.unlockPrivateKey(testPass);
		node.storeAgent(userAgent);
		node.launch();

		ServiceAgent testService = ServiceAgent.createServiceAgent(testTemplateService, "a pass");
		testService.unlockPrivateKey("a pass");

		node.registerReceiver(testService);

		// start connector
		logStream = new ByteArrayOutputStream();

		connector = new WebConnector(true, HTTP_PORT, false, 1000);
		connector.setLogStream(new PrintStream(logStream));
		connector.start(node);
		Thread.sleep(1000); // wait a second for the connector to become ready
		testAgent = MockAgentFactory.getAdam();
	}

	/**
	 * 
	 * Test for the listAll method.
	 * 
	 */
	@Test
	public void testlistAll() {
		MiniClient c = new MiniClient();
		c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
		JSONParser parser = new JSONParser();

		try {
			c.setLogin(Long.toString(testAgent.getId()), testPass);
			@SuppressWarnings("unchecked")
			ClientResponse result = c.sendRequest("GET", mainPath + "/list", "", MediaType.TEXT_PLAIN,
					MediaType.APPLICATION_JSON, new HashMap<String, String>());

			// Status: OK
			assertEquals(200, result.getHttpCode());

			System.out.println("Result of 'testlistAll': " + result.getResponse().trim());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception: " + e);
		}
	}

	/**
	 * 
	 * Test for the createEntry method.
	 * 
	 */
	@Test
	public void testcreateEntry() {
		MiniClient c = new MiniClient();
		c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);

		try {
			JSONObject entry = new JSONObject();
			c.setLogin(Long.toString(testAgent.getId()), testPass);

			// Create an entry
			entry.put(FAQ.QUESTION_KEY, "Testquestion");
			entry.put(FAQ.ANSWER_KEY, "Testanswer");
			ClientResponse result = c.sendRequest("POST", mainPath + "/create", entry.toJSONString(),
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, new HashMap<String, String>());

			assertEquals(201, result.getHttpCode());
			assertTrue(result.getResponse().trim().contains("Success"));

			System.out.println("Result of 'testcreateEntry': " + result.getResponse().trim());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception: " + e);
		}
	}

	/**
	 * Test for the deleteEntry method
	 * 
	 */
	@Test
	public void testdeleteEntry() {
		MiniClient c = new MiniClient();
		c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);

		try {
			JSONObject entry = new JSONObject();
			c.setLogin(Long.toString(testAgent.getId()), testPass);

			// Create test entry
			entry.put(FAQ.QUESTION_KEY, "Testquestion");
			entry.put(FAQ.ANSWER_KEY, "Testanswer");
			ClientResponse result = c.sendRequest("POST", mainPath + "/create", entry.toJSONString(),
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, new HashMap<String, String>());
			assertEquals(201, result.getHttpCode());

			// Get id of the new entry
			JSONParser parser = new JSONParser();
			JSONObject resultJSON = (JSONObject) parser.parse(result.getResponse());
			long id = (long) resultJSON.get("id");

			// Try to delete the entry
			JSONObject idJSON = new JSONObject();
			idJSON.put("id", id);
			result = c.sendRequest("DELETE", mainPath + "/delete", idJSON.toJSONString(), MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, new HashMap<String, String>());
			assertEquals(204, result.getHttpCode());

			System.out.println("Result of 'testdeleteEntry': " + result.getResponse().trim());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception: " + e);
		}
	}

	/**
	 * 
	 * Called after the tests have finished. Shuts down the server and prints out the connector log file for reference.
	 * 
	 * @throws Exception
	 * 
	 */
	@AfterClass
	public static void shutDownServer() throws Exception {

		connector.stop();
		node.shutDown();

		connector = null;
		node = null;

		LocalNode.reset();

		System.out.println("Connector-Log:");
		System.out.println("--------------");

		System.out.println(logStream.toString());

	}

}
