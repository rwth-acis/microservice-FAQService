package i5.las2peer.services.faq;

import java.net.HttpURLConnection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.restMapper.HttpResponse;
import i5.las2peer.restMapper.MediaType;
import i5.las2peer.restMapper.RESTMapper;
import i5.las2peer.restMapper.annotations.ContentParam;
import i5.las2peer.restMapper.annotations.Version;
import i5.las2peer.services.faq.database.DatabaseManager;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.jaxrs.Reader;
import io.swagger.models.Swagger;
import io.swagger.util.Json;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;


/**
 * 
 * FAQService
 * 
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 * 
 */
@Path("faq")
@Version("1.0") // this annotation is used by the XML mapper
@Api
@SwaggerDefinition(
    info = @Info(title = "FAQService", version = "1.0",
        description = "A LAS2peer microservice generated by the CAE.",
        termsOfService = "none",
        contact = @Contact(name = "Jonas K", email = "CAEAddress@gmail.com") ,
        license = @License(name = "BSD",
            url = "https://github.com/CAE-Community-Application-Editor/microservice-FAQService/blob/master/LICENSE.txt") ) )
public class faq extends Service {


  /*
   * Database configuration
   */
  private String jdbcDriverClassName;
  private String jdbcLogin;
  private String jdbcPass;
  private String jdbcUrl;
  private String jdbcSchema;
  private DatabaseManager dbm;


  public faq() {
    // read and set properties values
    setFieldValues();
    // instantiate a database manager to handle database connection pooling and credentials
    dbm = new DatabaseManager(jdbcDriverClassName, jdbcLogin, jdbcPass, jdbcUrl, jdbcSchema);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods.
  // //////////////////////////////////////////////////////////////////////////////////////


  /**
   * 
   * listAll
   * 
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/list")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "listAll")
  })
  @ApiOperation(value = "listAll", notes = "")
  public HttpResponse listAll() {
    // listAll
    boolean listAll_condition = true;
    if(listAll_condition) {
      JSONObject entryList = new JSONObject();
      HttpResponse listAll = new HttpResponse(entryList.toJSONString(), HttpURLConnection.HTTP_OK);
      return listAll;
    }
    return null;
  }


  /**
   * 
   * createEntry
   * 
   * @param entry a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/create")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "entryCreated")
  })
  @ApiOperation(value = "createEntry", notes = "")
  public HttpResponse createEntry(@ContentParam String entry) {
    JSONObject entry_JSON = (JSONObject) JSONValue.parse(entry);
    boolean entryCreated_condition = true;
    // entryCreated
    try {
    	String insertSQL = "INSERT INTO faq.entry (answer,question) VALUES (?,?)";
    	PreparedStatement preparedStatement = dbm.getConnection().prepareStatement(insertSQL);
    	preparedStatement.setString(1,"test");
    	preparedStatement.setString(2, "testanswer");
    	preparedStatement.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
		entryCreated_condition = false;
	}
    
    if(entryCreated_condition) {
      JSONObject result = new JSONObject();
      result.put("Result:", "Sucess");
      HttpResponse entryCreated = new HttpResponse(result.toJSONString(), HttpURLConnection.HTTP_CREATED);
      return entryCreated;
    }
    return null;
  }


  // //////////////////////////////////////////////////////////////////////////////////////
  // Methods required by the LAS2peer framework.
  // //////////////////////////////////////////////////////////////////////////////////////

  
  /**
   * 
   * This method is needed for every RESTful application in LAS2peer. Please don't change.
   * 
   * @return the mapping
   * 
   */
  public String getRESTMapping() {
    String result = "";
    try {
      result = RESTMapper.getMethodsAsXML(this.getClass());
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }


  /**
   * 
   * Returns the API documentation of all annotated resources for purposes of Swagger documentation.
   * 
   * @return The resource's documentation
   * 
   */
  @GET
  @Path("/swagger.json")
  @Produces(MediaType.APPLICATION_JSON)
  public HttpResponse getSwaggerJSON() {
    Swagger swagger = new Reader(new Swagger()).read(this.getClass());
    if (swagger == null) {
      return new HttpResponse("Swagger API declaration not available!",
          HttpURLConnection.HTTP_NOT_FOUND);
    }
    try {
      return new HttpResponse(Json.mapper().writeValueAsString(swagger), HttpURLConnection.HTTP_OK);
    } catch (JsonProcessingException e) {
      e.printStackTrace();
      return new HttpResponse(e.getMessage(), HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }

}
